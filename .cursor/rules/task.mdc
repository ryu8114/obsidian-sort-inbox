---
description: 
globs: 
alwaysApply: true
---
# Obsidian AIメモ分類プラグイン タスク一覧

## 📋 概要

Obsidianの「メモ/」フォルダ直下に作成された.mdファイルを、Gemini 2.0 Flashを使って自動的に適切なフォルダに分類・移動するプラグイン。
Obsidianのコマンドプロンプトで分類を実行します。

## ✅ タスクリスト

### フェーズ1: プロジェクト構成とベース実装

1. **プロジェクト初期化**
   - 概要: Obsidianプラグインのボイラープレートを設定
   - 完了条件:
     - [ ] プラグインの基本構成ファイル作成
     - [ ] TypeScriptの設定
     - [ ] manifest.jsonの設定
   - メモ: Obsidian公式のサンプルプラグインを参考にする

2. **型定義の作成**
   - 概要: プラグイン全体で使用する型定義を作成
   - 完了条件:
     - [ ] 設定値の型定義
     - [ ] 分類結果の型定義
     - [ ] APIレスポンスの型定義
   - メモ: types.tsに集約する

### フェーズ2: コア機能の実装

3. **設定画面の実装**
   - 概要: ユーザーがプラグイン設定を変更できるUIを実装
   - 完了条件:
     - [ ] Gemini APIキー入力フィールド
     - [ ] 分類対象フォルダリスト（追加・削除可能）
     - [ ] メモの監視対象フォルダ設定
     - [ ] 設定の保存・読み込み機能
   - メモ: settings.tsで実装

4. **Gemini API連携機能の実装**
   - 概要: Gemini 2.0 FlashにAPIリクエストを送信する機能
   - 完了条件:
     - [ ] APIリクエスト構築関数
     - [ ] プロンプトテンプレート実装
     - [ ] レスポンス解析処理
     - [ ] エラーハンドリング
   - メモ: classify.tsで実装

5. **ファイル分類ロジックの実装**
   - 概要: メモの内容を分析して適切なフォルダを特定する機能
   - 完了条件:
     - [ ] メモファイルの読み込み処理
     - [ ] タイトルと本文の抽出
     - [ ] Gemini APIを使った分類判定
     - [ ] 分類結果の処理（移動/スキップ）
   - メモ: classify.tsで実装

### フェーズ3: Obsidian統合と監視機能

6. **ファイル操作機能の実装**
   - 概要: Obsidian APIを使ったファイル操作機能
   - 完了条件:
     - [ ] ファイル読み込み機能
     - [ ] ファイル移動機能
     - [ ] 新規フォルダの存在確認
     - [ ] パス解決ユーティリティ
   - メモ: main.tsで実装

7. **ファイル監視機能の実装**
   - 概要: 新規メモや変更を監視する機能
   - 完了条件:
     - [ ] ファイル作成イベントのリスナー
     - [ ] 定期的なフォルダチェック機能
     - [ ] 変更検知時の分類処理呼び出し
   - メモ: main.tsでObsidianのイベントAPIを利用

### フェーズ4: テストと最適化

8. **エラー処理とログ機能の実装**
   - 概要: エラーハンドリングとログ出力機能
   - 完了条件:
     - [ ] API失敗時の例外処理
     - [ ] ファイル操作エラーのハンドリング
     - [ ] ユーザー通知機能
     - [ ] デバッグログ機能
   - メモ: 全体的に実装

9. **パフォーマンス最適化**
   - 概要: プラグインのパフォーマンス調整
   - 完了条件:
     - [ ] APIリクエストの効率化
     - [ ] キャッシング検討
     - [ ] リソース使用量の最適化
   - メモ: 大量のファイルがある場合の動作に注意

## ❓ 未解決の課題・確認事項

- Gemini 2.0 Flashの無料枠の制限（回数・トークン）をどう扱うか
- 分類精度向上のためのプロンプト調整方法
- 分類履歴の保存やユーザーによる分類修正機能の必要性