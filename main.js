/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SortInboxPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// settings.ts
var import_obsidian = require("obsidian");

// classify.ts
async function classifyFile(file, settings, vault) {
  try {
    const title = file.basename;
    const content = await vault.cachedRead(file);
    const maxLength = settings.classificationOptions.maxContentLength || 1e3;
    const truncatedContent = content.length > maxLength ? content.substring(0, maxLength) + "..." : content;
    const folderList = settings.targetFolders;
    if (!settings.geminiApiKey) {
      throw new Error("Gemini API\u30AD\u30FC\u304C\u8A2D\u5B9A\u3055\u308C\u3066\u3044\u307E\u305B\u3093");
    }
    const prompt = buildPrompt(title, truncatedContent, folderList);
    const response = await callGeminiAPI(settings.geminiApiKey, prompt, {
      timeoutMs: settings.classificationOptions.timeoutMs || 1e4,
      folderList
    });
    const targetFolder = response;
    return {
      file,
      targetFolder,
      success: true,
      status: "completed" /* COMPLETED */
    };
  } catch (error) {
    console.error("\u5206\u985E\u51E6\u7406\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F:", error);
    return {
      file,
      targetFolder: null,
      success: false,
      error: error instanceof Error ? error.message : String(error),
      status: "failed" /* FAILED */
    };
  }
}
function buildPrompt(title, content, folders) {
  const folderListText = folders.map((folder) => `- ${folder}`).join("\n");
  return `\u3042\u306A\u305F\u306F\u30D5\u30A9\u30EB\u30C0\u5206\u985E\u30A2\u30B7\u30B9\u30BF\u30F3\u30C8\u3067\u3059\u3002

\u4EE5\u4E0B\u306E\u30D5\u30A9\u30EB\u30C0\u4E00\u89A7\u304B\u3089\u3001\u3053\u306E\u30E1\u30E2\u306B\u6700\u3082\u9069\u3057\u305F\u3082\u306E\u30921\u3064\u9078\u3093\u3067\u304F\u3060\u3055\u3044\u3002
\u3082\u3057\u3069\u308C\u306B\u3082\u5F53\u3066\u306F\u307E\u3089\u306A\u3051\u308C\u3070\u3001\u300C\u5206\u985E\u3057\u306A\u3044\u300D\u3068\u3057\u3066\u304F\u3060\u3055\u3044\u3002

\u25A0 \u30D5\u30A9\u30EB\u30C0\u4E00\u89A7:
${folderListText}

\u25A0 \u30E1\u30E2\u306E\u30BF\u30A4\u30C8\u30EB:
${title}

\u25A0 \u30E1\u30E2\u306E\u672C\u6587:
${content}

\u51FA\u529B\u5F62\u5F0F\uFF081\u884C\uFF09:
- \u30D5\u30A9\u30EB\u30C0\u540D \u307E\u305F\u306F \u300C\u5206\u985E\u3057\u306A\u3044\u300D`;
}
function buildGeminiRequest(prompt, options) {
  return {
    contents: [{
      parts: [{
        text: prompt
      }]
    }],
    generationConfig: {
      temperature: 0.1,
      maxOutputTokens: 10
    }
  };
}
async function callGeminiAPI(apiKey, prompt, options) {
  if (!apiKey) {
    throw new Error("API\u30AD\u30FC\u304C\u6307\u5B9A\u3055\u308C\u3066\u3044\u307E\u305B\u3093");
  }
  const request = buildGeminiRequest(prompt, options);
  try {
    const response = await sendGeminiAPIRequest(apiKey, request, options);
    const targetFolder = parseGeminiResponse(response, (options == null ? void 0 : options.folderList) || []);
    return targetFolder;
  } catch (error) {
    console.error("Gemini API\u547C\u3073\u51FA\u3057\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F:", error);
    throw new Error("API\u547C\u3073\u51FA\u3057\u306B\u5931\u6557\u3057\u307E\u3057\u305F: " + (error instanceof Error ? error.message : String(error)));
  }
}
async function testGeminiAPI(apiKey) {
  if (!apiKey) {
    throw new Error("API\u30AD\u30FC\u304C\u6307\u5B9A\u3055\u308C\u3066\u3044\u307E\u305B\u3093");
  }
  const testPrompt = `\u3042\u306A\u305F\u306F\u30D5\u30A9\u30EB\u30C0\u5206\u985E\u30A2\u30B7\u30B9\u30BF\u30F3\u30C8\u3067\u3059\u3002\u3053\u306E\u30C6\u30B9\u30C8\u30E1\u30C3\u30BB\u30FC\u30B8\u306B\u300C\u30C6\u30B9\u30C8\u6210\u529F\u300D\u3068\u5FDC\u7B54\u3057\u3066\u304F\u3060\u3055\u3044\u3002`;
  const request = {
    contents: [{
      parts: [{
        text: testPrompt
      }]
    }],
    generationConfig: {
      temperature: 0.1,
      maxOutputTokens: 10
    }
  };
  try {
    const response = await sendGeminiAPIRequest(apiKey, request);
    if (!response.candidates || response.candidates.length === 0) {
      return false;
    }
    const text = response.candidates[0].content.parts[0].text.trim().toLowerCase();
    const isValid = text.includes("\u30C6\u30B9\u30C8\u6210\u529F") || text.includes("test success");
    return isValid;
  } catch (error) {
    console.error("API\u691C\u8A3C\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F:", error);
    throw new Error("API\u30C6\u30B9\u30C8\u306B\u5931\u6557\u3057\u307E\u3057\u305F: " + (error instanceof Error ? error.message : String(error)));
  }
}
function parseGeminiResponse(response, targetFolders) {
  try {
    if (!response.candidates || response.candidates.length === 0) {
      console.log("Gemini API\u5FDC\u7B54\u306B\u5019\u88DC\u304C\u3042\u308A\u307E\u305B\u3093");
      return null;
    }
    const text = response.candidates[0].content.parts[0].text.trim();
    console.log("Gemini API\u304B\u3089\u306E\u5FDC\u7B54:", text);
    if (text === "\u5206\u985E\u3057\u306A\u3044" || text.includes("\u5206\u985E\u3057\u306A\u3044")) {
      return null;
    }
    for (const folder of targetFolders) {
      if (text === folder || text.endsWith(folder) || text.includes(folder)) {
        return folder;
      }
    }
    return null;
  } catch (error) {
    console.error("Gemini\u5FDC\u7B54\u306E\u89E3\u6790\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F:", error);
    return null;
  }
}
async function sendGeminiAPIRequest(apiKey, requestBody, options) {
  const apiUrl = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";
  const timeoutMs = (options == null ? void 0 : options.timeoutMs) || 1e4;
  const urlWithKey = `${apiUrl}?key=${apiKey}`;
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), timeoutMs);
  try {
    const response = await fetch(urlWithKey, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(requestBody),
      signal: controller.signal
    });
    clearTimeout(timeoutId);
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`API request failed with status ${response.status}: ${errorText}`);
    }
    const data = await response.json();
    return data;
  } catch (error) {
    if (error.name === "AbortError") {
      throw new Error(`API request timed out after ${timeoutMs}ms`);
    }
    throw error;
  } finally {
    clearTimeout(timeoutId);
  }
}
async function classifyFileBatch(tasks, vault, progressCallback) {
  const results = [];
  const batchSize = 5;
  try {
    for (let i = 0; i < tasks.length; i += batchSize) {
      const batchTasks = tasks.slice(i, i + batchSize);
      const batchNumber = Math.floor(i / batchSize) + 1;
      const totalBatches = Math.ceil(tasks.length / batchSize);
      const progressMessage = `\u30D0\u30C3\u30C1 ${batchNumber}/${totalBatches} \u51E6\u7406\u4E2D`;
      console.log(`${progressMessage}: ${i + 1}\u301C${Math.min(i + batchSize, tasks.length)}/${tasks.length}\u30D5\u30A1\u30A4\u30EB...`);
      if (progressCallback) {
        progressCallback(i, tasks.length, progressMessage);
      }
      const batchPromises = batchTasks.map((task) => classifyFile(task.file, task.settings, vault));
      const batchResults = await Promise.all(batchPromises);
      results.push(...batchResults);
      if (i + batchSize < tasks.length) {
        const waitMessage = "API\u30EC\u30FC\u30C8\u5236\u9650\u5BFE\u7B56\u306E\u305F\u3081\u5F85\u6A5F\u4E2D...";
        console.log(waitMessage);
        if (progressCallback) {
          progressCallback(i + batchSize, tasks.length, waitMessage);
        }
        await new Promise((resolve) => setTimeout(resolve, 2e3));
      }
    }
    return results;
  } catch (error) {
    console.error("\u30D0\u30C3\u30C1\u5206\u985E\u51E6\u7406\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F:", error);
    throw error;
  }
}
async function batchClassifyFiles(files, settings, vault) {
  const results = /* @__PURE__ */ new Map();
  try {
    if (!settings.geminiApiKey) {
      throw new Error("Gemini API\u30AD\u30FC\u304C\u8A2D\u5B9A\u3055\u308C\u3066\u3044\u307E\u305B\u3093");
    }
    const fileMap = /* @__PURE__ */ new Map();
    const filesData = await Promise.all(files.map(async (file, index) => {
      const content = await vault.cachedRead(file);
      const maxLength = 300;
      const truncatedContent = content.length > maxLength ? content.substring(0, maxLength) + "..." : content;
      const fileId = `file_${index + 1}`;
      fileMap.set(fileId, file);
      return {
        id: fileId,
        title: file.basename,
        content: truncatedContent
      };
    }));
    const folderList = settings.targetFolders;
    const prompt = `\u3042\u306A\u306F\u30D5\u30A9\u30EB\u30C0\u5206\u985E\u30A2\u30B7\u30B9\u30BF\u30F3\u30C8\u3067\u3059\u3002\u4EE5\u4E0B\u306E\u8907\u6570\u306E\u30D5\u30A1\u30A4\u30EB\u3092\u3001\u6700\u3082\u9069\u3057\u305F\u30D5\u30A9\u30EB\u30C0\u306B\u5206\u985E\u3057\u3066\u304F\u3060\u3055\u3044\u3002

\u25A0 \u5206\u985E\u5148\u30D5\u30A9\u30EB\u30C0\u4E00\u89A7:
${folderList.map((folder) => `- ${folder}`).join("\n")}
\u203B\u3069\u306E\u30D5\u30A9\u30EB\u30C0\u306B\u3082\u5F53\u3066\u306F\u307E\u3089\u306A\u3044\u5834\u5408\u306F\u300C\u5206\u985E\u3057\u306A\u3044\u300D\u3068\u56DE\u7B54\u3057\u3066\u304F\u3060\u3055\u3044\u3002

\u25A0 \u5206\u985E\u5BFE\u8C61\u306E\u30D5\u30A1\u30A4\u30EB:
${filesData.map((file, index) => `
=== \u30D5\u30A1\u30A4\u30EB${index + 1} (ID:${file.id}): ${file.title} ===
${file.content}
`).join("\n")}

\u25A0 \u51FA\u529B\u5F62\u5F0F:
\u5404\u30D5\u30A1\u30A4\u30EB\u306E\u5206\u985E\u7D50\u679C\u3092\u4EE5\u4E0B\u306E\u5F62\u5F0F\u3067JSON\u914D\u5217\u3068\u3057\u3066\u8FD4\u3057\u3066\u304F\u3060\u3055\u3044:
[
    {"id": "file_1", "folder": "\u5206\u985E\u5148\u30D5\u30A9\u30EB\u30C0\u540D"},
    {"id": "file_2", "folder": "\u5206\u985E\u5148\u30D5\u30A9\u30EB\u30C0\u540D"},
    ...
]
\u203B\u300C\u5206\u985E\u3057\u306A\u3044\u300D\u5834\u5408\u306F\u3001"folder"\u306E\u5024\u3092"\u5206\u985E\u3057\u306A\u3044"\u3068\u3057\u3066\u304F\u3060\u3055\u3044\u3002
`;
    const request = {
      contents: [{
        parts: [{
          text: prompt
        }]
      }],
      generationConfig: {
        temperature: 0.1,
        maxOutputTokens: 1024
      }
    };
    const response = await sendGeminiAPIRequest(settings.geminiApiKey, request);
    if (!response.candidates || response.candidates.length === 0) {
      console.error("\u30D0\u30C3\u30C1\u5206\u985E: API\u5FDC\u7B54\u306B\u5019\u88DC\u304C\u3042\u308A\u307E\u305B\u3093");
      return results;
    }
    const responseText = response.candidates[0].content.parts[0].text.trim();
    console.log("\u30D0\u30C3\u30C1\u5206\u985E\u7D50\u679C:", responseText);
    const jsonMatch = responseText.match(/\[\s*\{[\s\S]*\}\s*\]/);
    if (!jsonMatch) {
      console.error("\u30D0\u30C3\u30C1\u5206\u985E: JSON\u5F62\u5F0F\u306E\u5FDC\u7B54\u3092\u62BD\u51FA\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F");
      return results;
    }
    try {
      const jsonResponse = JSON.parse(jsonMatch[0]);
      for (const item of jsonResponse) {
        const fileId = item.id;
        const folder = item.folder === "\u5206\u985E\u3057\u306A\u3044" ? null : item.folder;
        const file = fileMap.get(fileId);
        if (file) {
          if (folder === null || settings.targetFolders.includes(folder)) {
            results.set(file.path, folder);
          } else {
            results.set(file.path, null);
          }
        } else {
          console.warn(`\u30D5\u30A1\u30A4\u30EBID "${fileId}" \u306B\u5BFE\u5FDC\u3059\u308B\u30D5\u30A1\u30A4\u30EB\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093`);
        }
      }
    } catch (error) {
      console.error("\u30D0\u30C3\u30C1\u5206\u985E: JSON\u89E3\u6790\u30A8\u30E9\u30FC", error);
    }
  } catch (error) {
    console.error("\u30D0\u30C3\u30C1\u5206\u985E\u51E6\u7406\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F:", error);
  }
  return results;
}

// settings.ts
var DEFAULT_SETTINGS = {
  geminiApiKey: "",
  targetFolders: ["\u6280\u8853\u30E1\u30E2", "\u65E5\u8A18", "\u601D\u8003\u30ED\u30B0"],
  inboxFolder: "\u30E1\u30E2",
  autoClassifyInterval: 0,
  autoClassifyEnabled: false,
  classificationOptions: {
    maxContentLength: 1e3,
    timeoutMs: 1e4,
    logResults: true,
    skipUnclassified: true,
    highAccuracyMode: false,
    apiKeyStatus: "unverified",
    lastApiKeyVerification: void 0
  }
};
var SortInboxSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.apiTestInProgress = false;
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("sort-inbox-settings");
    this.addCustomStyles();
    const headerEl = containerEl.createEl("div", { cls: "sort-inbox-header" });
    headerEl.createEl("h2", { text: "Sort Inbox - \u30E1\u30E2\u81EA\u52D5\u5206\u985E" });
    headerEl.createEl("p", { text: "Gemini 2.0 Flash AI\u3092\u4F7F\u7528\u3057\u3066\u3001\u30E1\u30E2\u30D5\u30A9\u30EB\u30C0\u306E\u30D5\u30A1\u30A4\u30EB\u3092\u5185\u5BB9\u306B\u57FA\u3065\u3044\u3066\u81EA\u52D5\u5206\u985E\u3057\u307E\u3059\u3002" });
    this.createSectionTitle(containerEl, "API\u8A2D\u5B9A", "key");
    new import_obsidian.Setting(containerEl).setName("Gemini API \u30AD\u30FC").setDesc("Google AI Studio \u3067\u53D6\u5F97\u3057\u305FGemini API\u30AD\u30FC\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044").addText((text) => text.setPlaceholder("API \u30AD\u30FC\u3092\u5165\u529B").setValue(this.plugin.settings.geminiApiKey).onChange(async (value) => {
      this.plugin.settings.geminiApiKey = value;
      await this.plugin.saveSettings();
    }));
    const apiTestSetting = new import_obsidian.Setting(containerEl).setName("API\u30AD\u30FC\u306E\u30C6\u30B9\u30C8").setDesc("\u5165\u529B\u3057\u305FAPI\u30AD\u30FC\u304C\u6709\u52B9\u304B\u30C6\u30B9\u30C8\u3057\u307E\u3059");
    const apiStatusEl = containerEl.createEl("div", {
      cls: "api-status",
      text: "\u672A\u691C\u8A3C"
    });
    const savedStatus = this.plugin.settings.classificationOptions.apiKeyStatus;
    if (savedStatus) {
      if (savedStatus === "valid") {
        apiStatusEl.textContent = "\u6709\u52B9 \u2713";
        apiStatusEl.className = "api-status api-status-valid";
      } else if (savedStatus === "invalid") {
        apiStatusEl.textContent = "\u7121\u52B9 \u2717";
        apiStatusEl.className = "api-status api-status-error";
      } else if (savedStatus === "error") {
        apiStatusEl.textContent = "\u30A8\u30E9\u30FC \u2717";
        apiStatusEl.className = "api-status api-status-error";
      } else {
        apiStatusEl.textContent = "\u672A\u691C\u8A3C";
        apiStatusEl.className = "api-status";
      }
    }
    apiTestSetting.addButton((button) => button.setButtonText("\u30C6\u30B9\u30C8\u5B9F\u884C").setCta().onClick(async () => {
      if (this.apiTestInProgress) {
        return;
      }
      if (!this.plugin.settings.geminiApiKey) {
        new import_obsidian.Notice("API\u30AD\u30FC\u304C\u5165\u529B\u3055\u308C\u3066\u3044\u307E\u305B\u3093");
        apiStatusEl.textContent = "\u672A\u5165\u529B";
        apiStatusEl.className = "api-status api-status-error";
        this.plugin.settings.classificationOptions.apiKeyStatus = "invalid";
        this.plugin.settings.classificationOptions.lastApiKeyVerification = Date.now();
        await this.plugin.saveSettings();
        return;
      }
      this.apiTestInProgress = true;
      apiStatusEl.textContent = "\u691C\u8A3C\u4E2D...";
      apiStatusEl.className = "api-status api-status-pending";
      try {
        const isValid = await testGeminiAPI(this.plugin.settings.geminiApiKey);
        if (isValid) {
          apiStatusEl.textContent = "\u6709\u52B9 \u2713";
          apiStatusEl.className = "api-status api-status-valid";
          new import_obsidian.Notice("API\u30AD\u30FC\u306F\u6709\u52B9\u3067\u3059\uFF01");
          this.plugin.settings.classificationOptions.apiKeyStatus = "valid";
        } else {
          apiStatusEl.textContent = "\u7121\u52B9 \u2717";
          apiStatusEl.className = "api-status api-status-error";
          new import_obsidian.Notice("API\u30AD\u30FC\u304C\u7121\u52B9\u3067\u3059\u3002\u6B63\u3057\u3044\u30AD\u30FC\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044\u3002");
          this.plugin.settings.classificationOptions.apiKeyStatus = "invalid";
        }
      } catch (error) {
        console.error("API\u691C\u8A3C\u30A8\u30E9\u30FC:", error);
        apiStatusEl.textContent = "\u30A8\u30E9\u30FC \u2717";
        apiStatusEl.className = "api-status api-status-error";
        new import_obsidian.Notice(`API\u30C6\u30B9\u30C8\u30A8\u30E9\u30FC: ${error instanceof Error ? error.message : String(error)}`);
        this.plugin.settings.classificationOptions.apiKeyStatus = "error";
      } finally {
        this.apiTestInProgress = false;
        this.plugin.settings.classificationOptions.lastApiKeyVerification = Date.now();
        await this.plugin.saveSettings();
      }
    }));
    this.addSeparator(containerEl);
    this.createSectionTitle(containerEl, "\u30D5\u30A9\u30EB\u30C0\u8A2D\u5B9A", "folder");
    new import_obsidian.Setting(containerEl).setName("\u30E1\u30E2\u3092\u4FDD\u5B58\u3059\u308B\u30D5\u30A9\u30EB\u30C0").setDesc("\u65B0\u898F\u30E1\u30E2\u304C\u4FDD\u5B58\u3055\u308C\u308B\u76E3\u8996\u5BFE\u8C61\u306E\u30D5\u30A9\u30EB\u30C0\u540D\uFF08\u4F8B\uFF1A\u30E1\u30E2/\uFF09").addText((text) => text.setPlaceholder("\u30E1\u30E2").setValue(this.plugin.settings.inboxFolder).onChange(async (value) => {
      this.plugin.settings.inboxFolder = value;
      await this.plugin.saveSettings();
    }));
    this.addSeparator(containerEl);
    this.createSectionTitle(containerEl, "\u81EA\u52D5\u5B9F\u884C\u8A2D\u5B9A", "clock");
    const autoSetting = new import_obsidian.Setting(containerEl).setName("\u81EA\u52D5\u5206\u985E\u3092\u6709\u52B9\u306B\u3059\u308B").setDesc("ON\u306B\u3059\u308B\u3068\u8A2D\u5B9A\u3057\u305F\u9593\u9694\u3067\u81EA\u52D5\u7684\u306B\u30E1\u30E2\u3092\u5206\u985E\u3057\u307E\u3059").addToggle((toggle) => toggle.setValue(this.plugin.settings.autoClassifyEnabled).onChange(async (value) => {
      this.plugin.settings.autoClassifyEnabled = value;
      await this.plugin.saveSettings();
      intervalSetting.settingEl.style.display = value ? "flex" : "none";
      if (!value) {
        intervalLabel.textContent = "\u624B\u52D5\u5B9F\u884C\u306E\u307F";
      } else {
        intervalLabel.textContent = this.plugin.settings.autoClassifyInterval === 0 ? "\u624B\u52D5\u5B9F\u884C\u306E\u307F" : `${this.plugin.settings.autoClassifyInterval}\u5206\u3054\u3068\u306B\u5B9F\u884C`;
      }
    }));
    const intervalSetting = new import_obsidian.Setting(containerEl).setName("\u81EA\u52D5\u5B9F\u884C\u306E\u9593\u9694\uFF08\u5206\uFF09").setDesc("0\u306E\u5834\u5408\u306F\u624B\u52D5\u5B9F\u884C\u306E\u307F\u306B\u306A\u308A\u307E\u3059").setClass("interval-setting").addSlider((slider) => slider.setLimits(0, 60, 5).setValue(this.plugin.settings.autoClassifyInterval).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.autoClassifyInterval = value;
      await this.plugin.saveSettings();
      intervalLabel.textContent = value === 0 ? "\u624B\u52D5\u5B9F\u884C\u306E\u307F" : `${value}\u5206\u3054\u3068\u306B\u5B9F\u884C`;
    }));
    if (!this.plugin.settings.autoClassifyEnabled) {
      intervalSetting.settingEl.style.display = "none";
    }
    const intervalLabel = containerEl.createEl("div", {
      cls: "interval-label",
      text: this.plugin.settings.autoClassifyEnabled ? this.plugin.settings.autoClassifyInterval === 0 ? "\u624B\u52D5\u5B9F\u884C\u306E\u307F" : `${this.plugin.settings.autoClassifyInterval}\u5206\u3054\u3068\u306B\u5B9F\u884C` : "\u624B\u52D5\u5B9F\u884C\u306E\u307F"
    });
    this.addSeparator(containerEl);
    this.createSectionTitle(containerEl, "\u5206\u985E\u5BFE\u8C61\u30D5\u30A9\u30EB\u30C0", "folder-open");
    containerEl.createEl("p", {
      cls: "setting-description",
      text: "\u30E1\u30E2\u306E\u5185\u5BB9\u304B\u3089\u9069\u5207\u306A\u30D5\u30A9\u30EB\u30C0\u3092\u5224\u65AD\u3057\u3001\u81EA\u52D5\u7684\u306B\u79FB\u52D5\u3057\u307E\u3059\u3002\u4EE5\u4E0B\u306E\u30D5\u30A9\u30EB\u30C0\u30EA\u30B9\u30C8\u304B\u3089\u9078\u629E\u3055\u308C\u307E\u3059\u3002"
    });
    const folderListContainer = containerEl.createDiv("folder-list-container");
    this.refreshFolderList(folderListContainer);
    const folderAddContainer = containerEl.createDiv("folder-add-container");
    const folderInputEl = folderAddContainer.createEl("input", {
      type: "text",
      placeholder: "\u65B0\u3057\u3044\u30D5\u30A9\u30EB\u30C0\u540D\u3092\u5165\u529B",
      cls: "folder-input"
    });
    this.folderInputEl = folderInputEl;
    const addButton = new import_obsidian.ButtonComponent(folderAddContainer).setButtonText("\u8FFD\u52A0").setCta().onClick(async () => {
      if (folderInputEl.value) {
        if (this.plugin.settings.targetFolders.includes(folderInputEl.value)) {
          new import_obsidian.Notice("\u3053\u306E\u30D5\u30A9\u30EB\u30C0\u306F\u65E2\u306B\u8FFD\u52A0\u3055\u308C\u3066\u3044\u307E\u3059");
          return;
        }
        this.plugin.settings.targetFolders.push(folderInputEl.value);
        await this.plugin.saveSettings();
        this.refreshFolderList(folderListContainer);
        folderInputEl.value = "";
      }
    });
    folderInputEl.addEventListener("keypress", async (e) => {
      if (e.key === "Enter" && folderInputEl.value) {
        if (this.plugin.settings.targetFolders.includes(folderInputEl.value)) {
          new import_obsidian.Notice("\u3053\u306E\u30D5\u30A9\u30EB\u30C0\u306F\u65E2\u306B\u8FFD\u52A0\u3055\u308C\u3066\u3044\u307E\u3059");
          return;
        }
        this.plugin.settings.targetFolders.push(folderInputEl.value);
        await this.plugin.saveSettings();
        this.refreshFolderList(folderListContainer);
        folderInputEl.value = "";
      }
    });
    this.addSeparator(containerEl);
    this.createSectionTitle(containerEl, "\u8A73\u7D30\u8A2D\u5B9A", "settings");
    new import_obsidian.Setting(containerEl).setName("\u62BD\u51FA\u3059\u308B\u6700\u5927\u6587\u5B57\u6570").setDesc("\u30E1\u30E2\u304B\u3089Gemini API\u306B\u9001\u4FE1\u3059\u308B\u6700\u5927\u6587\u5B57\u6570\uFF08\u9577\u3044\u3068\u51E6\u7406\u6642\u9593\u3068\u30C8\u30FC\u30AF\u30F3\u6D88\u8CBB\u304C\u5897\u3048\u307E\u3059\uFF09").addSlider((slider) => slider.setLimits(100, 3e3, 100).setValue(this.plugin.settings.classificationOptions.maxContentLength || 1e3).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.classificationOptions.maxContentLength = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("API\u30BF\u30A4\u30E0\u30A2\u30A6\u30C8\uFF08\u30DF\u30EA\u79D2\uFF09").setDesc("API\u547C\u3073\u51FA\u3057\u306E\u30BF\u30A4\u30E0\u30A2\u30A6\u30C8\u6642\u9593\uFF08\u30DF\u30EA\u79D2\uFF09").addText((text) => text.setValue(String(this.plugin.settings.classificationOptions.timeoutMs || 1e4)).onChange(async (value) => {
      const numValue = parseInt(value);
      if (!isNaN(numValue) && numValue > 0) {
        this.plugin.settings.classificationOptions.timeoutMs = numValue;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian.Setting(containerEl).setName("\u5206\u985E\u3067\u304D\u306A\u304B\u3063\u305F\u30E1\u30E2\u3092\u30B9\u30AD\u30C3\u30D7").setDesc("ON\u306B\u3059\u308B\u3068\u3001\u5206\u985E\u5148\u304C\u7279\u5B9A\u3067\u304D\u306A\u304B\u3063\u305F\u30E1\u30E2\u3092\u79FB\u52D5\u3057\u307E\u305B\u3093").addToggle((toggle) => toggle.setValue(this.plugin.settings.classificationOptions.skipUnclassified || true).onChange(async (value) => {
      this.plugin.settings.classificationOptions.skipUnclassified = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u8A73\u7D30\u30ED\u30B0\u306E\u8868\u793A").setDesc("\u5206\u985E\u51E6\u7406\u306E\u8A73\u7D30\u306A\u30ED\u30B0\u3092\u8868\u793A\u3057\u307E\u3059").addToggle((toggle) => toggle.setValue(this.plugin.settings.classificationOptions.logResults || true).onChange(async (value) => {
      this.plugin.settings.classificationOptions.logResults = value;
      await this.plugin.saveSettings();
    }));
    const footerEl = containerEl.createEl("div", { cls: "sort-inbox-footer" });
    footerEl.createEl("p", {
      text: "Gemini 2.0 Flash API \u3092\u4F7F\u7528\u3057\u3066\u3044\u307E\u3059\u3002API\u4F7F\u7528\u91CF\u3084\u5236\u9650\u306B\u3064\u3044\u3066\u306FGoogle AI Studio\u3092\u3054\u78BA\u8A8D\u304F\u3060\u3055\u3044\u3002"
    });
  }
  refreshFolderList(containerEl) {
    containerEl.empty();
    if (this.plugin.settings.targetFolders.length === 0) {
      containerEl.createEl("div", {
        cls: "empty-folder-list",
        text: "\u30D5\u30A9\u30EB\u30C0\u30EA\u30B9\u30C8\u304C\u7A7A\u3067\u3059\u3002\u30D5\u30A9\u30EB\u30C0\u3092\u8FFD\u52A0\u3057\u3066\u304F\u3060\u3055\u3044\u3002"
      });
      return;
    }
    const folderListEl = containerEl.createEl("div", { cls: "folders-list" });
    this.plugin.settings.targetFolders.forEach((folder, index) => {
      const folderItemEl = folderListEl.createEl("div", { cls: "folder-item" });
      const iconEl = folderItemEl.createEl("span", { cls: "folder-icon" });
      (0, import_obsidian.setIcon)(iconEl, "folder");
      folderItemEl.createEl("span", {
        cls: "folder-name",
        text: folder
      });
      const deleteButtonEl = folderItemEl.createEl("button", { cls: "folder-delete-btn" });
      (0, import_obsidian.setIcon)(deleteButtonEl, "trash");
      deleteButtonEl.addEventListener("click", async () => {
        this.plugin.settings.targetFolders.splice(index, 1);
        await this.plugin.saveSettings();
        this.refreshFolderList(containerEl);
      });
    });
  }
  setupDragAndDrop(container) {
  }
  createSectionTitle(containerEl, title, iconId) {
    const titleEl = containerEl.createEl("div", { cls: "section-title" });
    const iconEl = titleEl.createEl("span", { cls: "section-icon" });
    (0, import_obsidian.setIcon)(iconEl, iconId);
    titleEl.createEl("h3", { text: title });
  }
  addSeparator(containerEl) {
    containerEl.createEl("hr", { cls: "settings-separator" });
  }
  addCustomStyles() {
    document.body.classList.add("sort-inbox-plugin-settings");
    const existingStyle = document.getElementById("sort-inbox-styles");
    if (existingStyle) {
      existingStyle.remove();
    }
    const styleEl = document.createElement("style");
    styleEl.id = "sort-inbox-styles";
    styleEl.textContent = `
			.sort-inbox-header {
				margin-bottom: 20px;
				padding-bottom: 10px;
				border-bottom: 1px solid var(--background-modifier-border);
			}
			
			.sort-inbox-header p {
				color: var(--text-muted);
				margin-top: 0;
			}
			
			.section-title {
				display: flex;
				align-items: center;
				margin: 15px 0 5px;
			}
			
			.section-icon {
				margin-right: 8px;
				color: var(--text-accent);
			}
			
			.settings-separator {
				margin: 20px 0;
				border: none;
				border-top: 1px dashed var(--background-modifier-border);
			}
			
			.setting-description {
				color: var(--text-muted);
				font-size: 0.9em;
				margin: 5px 0 15px;
			}
			
			.folder-list-container {
				margin: 10px 0;
				border: 1px solid var(--background-modifier-border);
				border-radius: 5px;
				padding: 10px;
				max-height: 200px;
				overflow-y: auto;
			}
			
			.empty-folder-list {
				color: var(--text-muted);
				font-style: italic;
				padding: 10px;
				text-align: center;
			}
			
			.folders-list {
				display: flex;
				flex-direction: column;
				gap: 5px;
			}
			
			.folder-item {
				display: flex;
				align-items: center;
				padding: 5px 10px;
				background-color: var(--background-secondary);
				border-radius: 3px;
				transition: background-color 0.2s;
			}
			
			.folder-item:hover {
				background-color: var(--background-secondary-alt);
			}
			
			.folder-icon {
				color: var(--text-accent);
				margin-right: 8px;
			}
			
			.folder-name {
				flex-grow: 1;
			}
			
			.folder-delete-btn {
				background: none;
				border: none;
				color: var(--text-muted);
				cursor: pointer;
				padding: 2px;
				border-radius: 3px;
			}
			
			.folder-delete-btn:hover {
				color: var(--text-error);
				background-color: var(--background-modifier-error);
			}
			
			.folder-add-container {
				display: flex;
				margin: 10px 0;
				gap: 10px;
			}
			
			.folder-input {
				flex-grow: 1;
				padding: 6px 10px;
				border-radius: 4px;
				border: 1px solid var(--background-modifier-border);
				background-color: var(--background-primary);
			}
			
			.interval-label {
				text-align: center;
				font-size: 0.9em;
				color: var(--text-accent);
				margin-top: 5px;
				font-weight: bold;
			}
			
			.api-status {
				display: inline-block;
				margin-left: 10px;
				padding: 3px 8px;
				border-radius: 4px;
				font-size: 0.85em;
				font-weight: bold;
			}
			
			.api-status-valid {
				background-color: var(--background-modifier-success);
				color: var(--text-on-accent);
			}
			
			.api-status-error {
				background-color: var(--background-modifier-error);
				color: white;
			}
			
			.api-status-pending {
				background-color: var(--background-modifier-border);
				color: var(--text-muted);
			}
			
			.sort-inbox-footer {
				margin-top: 30px;
				padding-top: 10px;
				border-top: 1px solid var(--background-modifier-border);
				font-size: 0.85em;
				color: var(--text-muted);
			}
		`;
    document.head.appendChild(styleEl);
  }
};

// main.ts
var SortInboxPlugin = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.autoClassifyIntervalId = null;
    this.currentBatch = null;
  }
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("folder", "Sort Inbox", (evt) => {
      this.sortInbox();
    });
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Sort Inbox");
    this.addCommand({
      id: "run-sort-inbox",
      name: "\u30E1\u30E2\u3092\u81EA\u52D5\u5206\u985E\u3059\u308B",
      callback: () => {
        this.sortInbox();
      }
    });
    this.addSettingTab(new SortInboxSettingTab(this.app, this));
    this.setupAutoClassify();
    console.log("Sort Inbox \u30D7\u30E9\u30B0\u30A4\u30F3\u3092\u8AAD\u307F\u8FBC\u307F\u307E\u3057\u305F");
    console.log("\u73FE\u5728\u306E\u8A2D\u5B9A:", this.settings);
    this.registerEvent(this.app.vault.on("create", (file) => {
      this.handleFileCreated(file);
    }));
  }
  onunload() {
    if (this.autoClassifyIntervalId !== null) {
      window.clearInterval(this.autoClassifyIntervalId);
      this.autoClassifyIntervalId = null;
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.setupAutoClassify();
  }
  setupAutoClassify() {
    if (this.autoClassifyIntervalId !== null) {
      window.clearInterval(this.autoClassifyIntervalId);
      this.autoClassifyIntervalId = null;
    }
    if (this.settings.autoClassifyEnabled && this.settings.autoClassifyInterval > 0) {
      const intervalMs = this.settings.autoClassifyInterval * 60 * 1e3;
      this.autoClassifyIntervalId = window.setInterval(() => {
        this.sortInbox();
      }, intervalMs);
      console.log(`\u81EA\u52D5\u5206\u985E\u3092${this.settings.autoClassifyInterval}\u5206\u9593\u9694\u3067\u8A2D\u5B9A\u3057\u307E\u3057\u305F`);
    }
  }
  async handleFileCreated(file) {
    if (!(file instanceof import_obsidian2.TFile) || file.extension !== "md") {
      console.log(`\u975E\u30DE\u30FC\u30AF\u30C0\u30A6\u30F3\u30D5\u30A1\u30A4\u30EB\u306E\u305F\u3081\u30B9\u30AD\u30C3\u30D7\u3057\u307E\u3059: ${file.path}`);
      return;
    }
    const inboxPath = this.getNormalizedInboxPath();
    const filePath = (0, import_obsidian2.normalizePath)(file.path);
    console.log(`\u30D5\u30A1\u30A4\u30EB\u4F5C\u6210\u30A4\u30D9\u30F3\u30C8: \u30D1\u30B9=${filePath}, \u5BFE\u8C61\u30D5\u30A9\u30EB\u30C0=${inboxPath}`);
    const isInInboxFolder = this.isFileInInboxFolder(file);
    if (!isInInboxFolder) {
      console.log(`\u5BFE\u8C61\u30D5\u30A9\u30EB\u30C0\u5916\u306E\u30D5\u30A1\u30A4\u30EB\u306E\u305F\u3081\u30B9\u30AD\u30C3\u30D7\u3057\u307E\u3059: ${filePath} (\u5BFE\u8C61\u30D5\u30A9\u30EB\u30C0: ${inboxPath})`);
      return;
    }
    console.log(`\u65B0\u3057\u3044\u30D5\u30A1\u30A4\u30EB\u304C\u4F5C\u6210\u3055\u308C\u307E\u3057\u305F: ${filePath}`);
    if (this.settings.autoClassifyEnabled) {
      console.log(`\u81EA\u52D5\u5206\u985E\u304C\u6709\u52B9\u306A\u306E\u30671\u79D2\u5F8C\u306B\u5206\u985E\u3092\u5B9F\u884C\u3057\u307E\u3059: ${file.basename}`);
      setTimeout(() => {
        this.classifySingleFile(file);
      }, 1e3);
    }
  }
  getNormalizedInboxPath() {
    let inboxPath = this.settings.inboxFolder.trim();
    if (inboxPath.endsWith("/") || inboxPath.endsWith("\\")) {
      inboxPath = inboxPath.slice(0, -1);
    }
    return (0, import_obsidian2.normalizePath)(inboxPath);
  }
  isFileInInboxFolder(file) {
    const inboxPath = this.getNormalizedInboxPath();
    const filePath = (0, import_obsidian2.normalizePath)(file.path);
    if (inboxPath === "") {
      console.log("\u8B66\u544A: \u76E3\u8996\u5BFE\u8C61\u30D5\u30A9\u30EB\u30C0\u304C\u8A2D\u5B9A\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002\u30EB\u30FC\u30C8\u76F4\u4E0B\u306E\u30D5\u30A1\u30A4\u30EB\u306E\u307F\u5BFE\u8C61\u306B\u3057\u307E\u3059\u3002");
      return !filePath.includes("/");
    }
    if (filePath.startsWith(inboxPath + "/")) {
      const remainingPath = filePath.substring((inboxPath + "/").length);
      if (!remainingPath.includes("/")) {
        return true;
      }
    }
    return false;
  }
  async classifySingleFile(file) {
    try {
      new import_obsidian2.Notice(`\u30D5\u30A1\u30A4\u30EB\u300C${file.basename}\u300D\u3092\u5206\u985E\u4E2D...`);
      console.log(`\u30D5\u30A1\u30A4\u30EB\u300C${file.basename}\u300D\u306E\u5206\u985E\u3092\u958B\u59CB\u3057\u307E\u3059`);
      const result = await classifyFile(file, this.settings, this.app.vault);
      console.log(`\u5206\u985E\u7D50\u679C:`, result);
      if (result.success && result.targetFolder) {
        try {
          await this.moveFileToFolder(file, result.targetFolder);
          new import_obsidian2.Notice(`\u30D5\u30A1\u30A4\u30EB\u3092\u300C${result.targetFolder}\u300D\u306B\u5206\u985E\u3057\u307E\u3057\u305F`);
          if (this.settings.classificationOptions.logResults) {
            console.log(`\u30D5\u30A1\u30A4\u30EB\u300C${file.basename}\u300D\u3092\u300C${result.targetFolder}\u300D\u306B\u5206\u985E\u3057\u307E\u3057\u305F`);
          }
        } catch (moveError) {
          console.error("\u30D5\u30A1\u30A4\u30EB\u79FB\u52D5\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F:", moveError);
          new import_obsidian2.Notice(`\u30D5\u30A1\u30A4\u30EB\u79FB\u52D5\u30A8\u30E9\u30FC: ${moveError instanceof Error ? moveError.message : String(moveError)}`);
        }
      } else if (result.success) {
        new import_obsidian2.Notice("\u5206\u985E\u5148\u304C\u898B\u3064\u304B\u3089\u306A\u304B\u3063\u305F\u305F\u3081\u3001\u30D5\u30A1\u30A4\u30EB\u306F\u79FB\u52D5\u3057\u307E\u305B\u3093\u3067\u3057\u305F");
        if (this.settings.classificationOptions.logResults) {
          console.log(`\u30D5\u30A1\u30A4\u30EB\u300C${file.basename}\u300D\u306F\u5206\u985E\u5BFE\u8C61\u30D5\u30A9\u30EB\u30C0\u304C\u898B\u3064\u304B\u3089\u306A\u304B\u3063\u305F\u305F\u3081\u30B9\u30AD\u30C3\u30D7\u3057\u307E\u3057\u305F`);
        }
      } else {
        new import_obsidian2.Notice(`\u5206\u985E\u30A8\u30E9\u30FC: ${result.error || "\u4E0D\u660E\u306A\u30A8\u30E9\u30FC"}`);
      }
    } catch (error) {
      console.error("\u30D5\u30A1\u30A4\u30EB\u5206\u985E\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F:", error);
      new import_obsidian2.Notice("\u30D5\u30A1\u30A4\u30EB\u5206\u985E\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F");
    }
  }
  async sortInbox() {
    if (this.currentBatch && this.currentBatch.inProgress) {
      new import_obsidian2.Notice("\u5206\u985E\u51E6\u7406\u304C\u65E2\u306B\u5B9F\u884C\u4E2D\u3067\u3059");
      return;
    }
    try {
      const inboxPath = this.getNormalizedInboxPath();
      if (!inboxPath) {
        new import_obsidian2.Notice("\u76E3\u8996\u5BFE\u8C61\u30D5\u30A9\u30EB\u30C0\u304C\u8A2D\u5B9A\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002\u8A2D\u5B9A\u753B\u9762\u3067\u6307\u5B9A\u3057\u3066\u304F\u3060\u3055\u3044\u3002");
        return;
      }
      new import_obsidian2.Notice(`\u300C${inboxPath}\u300D\u5185\u306E\u30D5\u30A1\u30A4\u30EB\u3092\u5206\u985E\u4E2D...`);
      console.log(`\u300C${inboxPath}\u300D\u5185\u306E\u30D5\u30A1\u30A4\u30EB\u306E\u4E00\u62EC\u5206\u985E\u3092\u958B\u59CB\u3057\u307E\u3059`);
      const allFiles = this.app.vault.getMarkdownFiles();
      const files = allFiles.filter((file) => this.isFileInInboxFolder(file));
      console.log(`\u691C\u51FA\u3055\u308C\u305F\u30D5\u30A1\u30A4\u30EB\u6570: ${files.length}`);
      console.log(`\u691C\u51FA\u3055\u308C\u305F\u30D5\u30A1\u30A4\u30EB:`, files.map((f) => f.path));
      if (files.length === 0) {
        new import_obsidian2.Notice(`\u300C${inboxPath}\u300D\u5185\u306B\u5206\u985E\u5BFE\u8C61\u306E\u30D5\u30A1\u30A4\u30EB\u304C\u3042\u308A\u307E\u305B\u3093`);
        return;
      }
      this.currentBatch = {
        tasks: files.map((file) => ({ file, settings: this.settings })),
        summary: {
          totalFiles: files.length,
          classifiedFiles: 0,
          skippedFiles: 0,
          failedFiles: 0,
          folderCounts: {},
          durationMs: 0
        },
        inProgress: true,
        startTime: Date.now()
      };
      const useJsonBatch = files.length >= 3 && !this.settings.classificationOptions.highAccuracyMode;
      if (useJsonBatch) {
        try {
          this.showProgress(0, files.length, "\u4E00\u62EC\u5206\u985E\u51E6\u7406\u3092\u958B\u59CB...");
          const batchResults = await batchClassifyFiles(files, this.settings, this.app.vault);
          this.showProgress(files.length / 2, files.length, "\u5206\u985E\u7D50\u679C\u306B\u57FA\u3065\u3044\u3066\u30D5\u30A1\u30A4\u30EB\u3092\u79FB\u52D5\u4E2D...");
          for (const file of files) {
            try {
              const targetFolder = batchResults.get(file.path);
              if (targetFolder) {
                await this.moveFileToFolder(file, targetFolder);
                this.currentBatch.summary.classifiedFiles++;
                if (!this.currentBatch.summary.folderCounts[targetFolder]) {
                  this.currentBatch.summary.folderCounts[targetFolder] = 0;
                }
                this.currentBatch.summary.folderCounts[targetFolder]++;
              } else {
                this.currentBatch.summary.skippedFiles++;
              }
            } catch (error) {
              console.error(`\u30D5\u30A1\u30A4\u30EB\u300C${file.basename}\u300D\u306E\u51E6\u7406\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F:`, error);
              this.currentBatch.summary.failedFiles++;
            }
          }
        } catch (batchError) {
          console.error("\u30D0\u30C3\u30C1\u51E6\u7406\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F:", batchError);
          new import_obsidian2.Notice(`\u30D0\u30C3\u30C1\u51E6\u7406\u30A8\u30E9\u30FC: ${batchError instanceof Error ? batchError.message : String(batchError)}`);
        }
      } else {
        try {
          const results = await classifyFileBatch(this.currentBatch.tasks, this.app.vault, (current, total, message) => this.showProgress(current, total, message));
          for (const result of results) {
            try {
              if (result.success && result.targetFolder) {
                await this.moveFileToFolder(result.file, result.targetFolder);
                this.currentBatch.summary.classifiedFiles++;
                if (!this.currentBatch.summary.folderCounts[result.targetFolder]) {
                  this.currentBatch.summary.folderCounts[result.targetFolder] = 0;
                }
                this.currentBatch.summary.folderCounts[result.targetFolder]++;
              } else if (result.success) {
                this.currentBatch.summary.skippedFiles++;
              } else {
                this.currentBatch.summary.failedFiles++;
              }
            } catch (error) {
              console.error(`\u30D5\u30A1\u30A4\u30EB\u300C${result.file.basename}\u300D\u306E\u51E6\u7406\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F:`, error);
              this.currentBatch.summary.failedFiles++;
            }
          }
        } catch (batchError) {
          console.error("\u30D0\u30C3\u30C1\u51E6\u7406\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F:", batchError);
          new import_obsidian2.Notice(`\u30D0\u30C3\u30C1\u51E6\u7406\u30A8\u30E9\u30FC: ${batchError instanceof Error ? batchError.message : String(batchError)}`);
        }
      }
      this.currentBatch.inProgress = false;
      this.currentBatch.summary.durationMs = Date.now() - this.currentBatch.startTime;
      this.showClassificationResults(this.currentBatch.summary);
    } catch (error) {
      console.error("\u5206\u985E\u51E6\u7406\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F:", error);
      new import_obsidian2.Notice("\u5206\u985E\u51E6\u7406\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F");
      if (this.currentBatch) {
        this.currentBatch.inProgress = false;
      }
    }
  }
  async moveFileToFolder(file, targetFolder) {
    const inboxPath = this.getNormalizedInboxPath();
    const fullTargetFolder = inboxPath ? `${inboxPath}/${targetFolder}` : targetFolder;
    const targetPath = (0, import_obsidian2.normalizePath)(`${fullTargetFolder}/${file.name}`);
    console.log(`\u79FB\u52D5\u5148\u30D5\u30A9\u30EB\u30C0\u306E\u30D5\u30EB\u30D1\u30B9: ${fullTargetFolder}`);
    console.log(`\u79FB\u52D5\u5148\u30D5\u30A1\u30A4\u30EB\u306E\u5B8C\u5168\u30D1\u30B9: ${targetPath}`);
    try {
      const folderExists = await this.app.vault.adapter.exists(fullTargetFolder);
      if (!folderExists) {
        console.log(`\u30D5\u30A9\u30EB\u30C0\u300C${fullTargetFolder}\u300D\u304C\u5B58\u5728\u3057\u306A\u3044\u305F\u3081\u4F5C\u6210\u3057\u307E\u3059`);
        await this.app.vault.createFolder(fullTargetFolder);
      }
    } catch (error) {
      console.error(`\u30D5\u30A9\u30EB\u30C0\u300C${fullTargetFolder}\u300D\u306E\u78BA\u8A8D\u30FB\u4F5C\u6210\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F:`, error);
      throw new Error(`\u30D5\u30A9\u30EB\u30C0\u306E\u4F5C\u6210\u306B\u5931\u6557\u3057\u307E\u3057\u305F: ${error}`);
    }
    try {
      console.log(`\u30D5\u30A1\u30A4\u30EB\u300C${file.path}\u300D\u3092\u300C${targetPath}\u300D\u306B\u79FB\u52D5\u3057\u307E\u3059`);
      await this.app.fileManager.renameFile(file, targetPath);
      return true;
    } catch (error) {
      console.error(`\u30D5\u30A1\u30A4\u30EB\u300C${file.path}\u300D\u3092\u300C${targetPath}\u300D\u306B\u79FB\u52D5\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F:`, error);
      throw new Error(`\u30D5\u30A1\u30A4\u30EB\u306E\u79FB\u52D5\u306B\u5931\u6557\u3057\u307E\u3057\u305F: ${error}`);
    }
  }
  showClassificationResults(summary) {
    const totalTime = (summary.durationMs / 1e3).toFixed(1);
    let message = `\u5206\u985E\u5B8C\u4E86: \u5168${summary.totalFiles}\u30D5\u30A1\u30A4\u30EB\u4E2D\u3001${summary.classifiedFiles}\u30D5\u30A1\u30A4\u30EB\u3092\u5206\u985E\uFF08${totalTime}\u79D2\uFF09`;
    if (summary.skippedFiles > 0) {
      message += `
\u5206\u985E\u30B9\u30AD\u30C3\u30D7: ${summary.skippedFiles}\u30D5\u30A1\u30A4\u30EB`;
    }
    if (summary.failedFiles > 0) {
      message += `
\u30A8\u30E9\u30FC: ${summary.failedFiles}\u30D5\u30A1\u30A4\u30EB`;
    }
    new import_obsidian2.Notice(message);
    console.log("\u5206\u985E\u51E6\u7406\u7D50\u679C:", summary);
  }
  showProgress(current, total, message = "") {
    const percent = Math.round(current / total * 100);
    const progressMessage = `\u51E6\u7406\u4E2D... ${current}/${total} (${percent}%)${message ? ` - ${message}` : ""}`;
    new import_obsidian2.Notice(progressMessage, 3e3);
  }
};
